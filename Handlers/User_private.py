import sqlite3
from aiogram import types, Router, F, Bot
from aiogram.filters import or_f, StateFilter
from aiogram.fsm.context import FSMContext
from kb.inline import get_choice_mod, get_back_button, get_cities_menu_keyboard, \
    get_type_menu_keyboard, get_placesmenu_by_parms, get_info_about_place, get_choice_rate
from settings import Places, blank_photo
from Forms import FormRate_bot


#**********************************************************************–î–ë**************************************************************
connection = sqlite3.connect("TouristBotStatistics.db")
connection.execute("PRAGMA Journal_mode=WAL")
cursor = connection.cursor()
def CityCode(s):
    if s == 'klgd':
        return('–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ ')
    if s == 'zel':
        return('–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫')
    if s == 'sve':
        return('–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫ ')
    if s == 'yant':
        return('–Ø–Ω—Ç–∞—Ä–Ω—ã–π    ')
    if s == 'pol':
        return('–ü–æ–ª–µ—Å—Å–∫     ')
    if s == 'cher':
        return('–ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫  ')
#—Ç–∞–±–ª–∏—Ü–∞ visit
def add_visitor(s): #–¥–æ–±–∞–≤—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
    cursor.execute('SELECT count FROM visit WHERE location = ?', (s, ))
    users = cursor.fetchone()
    cursor.execute('UPDATE visit SET count = ? WHERE location = ?', (int(users[0]) + 1, s))
    connection.commit()
def print_visit(): #–≤—ã–≤–µ—Å—Ç–∏ –≤—Å—ë –∏–∑ visit
    cursor.execute('SELECT * FROM visit')
    users = cursor.fetchall()
    for user in users:
        print(user)
#—Ç–∞–±–ª–∏—Ü–∞ places
def change_sale(id, s):
    try:
        cursor.execute('UPDATE places SET sale = ? WHERE id = ?', (s, id))
        connection.commit()
    except ValueError:
        pass
def change_name(id, s):
    try:
        cursor.execute('SELECT * FROM visit')
        res = cursor.fetchall()
        cursor.execute('SELECT Name FROM places WHERE id = ?', (id, ))
        a = cursor.fetchone()
        k = a[0] #–∏–º—è —Å –¥–∞–Ω–Ω—ã–º id
        cursor.execute('SELECT City FROM places WHERE id = ?', (id, ))
        b = cursor.fetchone()
        m = b[0] #–∫–æ–¥ –≥–æ—Ä–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º id
        for r in res:
            t = r[0]
            if t[0: len(t) - 15] == k and t[len(t)-13:len(t)-1] == CityCode(m):
                d = t.replace(k, s)
                cursor.execute('UPDATE visit SET location = ? WHERE location = ?', (d, r[0]))
        cursor.execute('UPDATE places SET Name = ? WHERE id = ?', (s, id))
        connection.commit()
    except ValueError:
        pass
def change_address(id, s):
    try:
        cursor.execute('UPDATE places SET Address = ? WHERE id = ?', (s, id))
        connection.commit()
    except ValueError:
        pass
def change_desc(id, s):
    try:
        cursor.execute('UPDATE places SET desc = ? WHERE id = ?', (s, id))
        connection.commit()
    except ValueError:
        pass
def change_link(id, s):
    try:
        cursor.execute('UPDATE places SET link = ? WHERE id = ?', (s, id))
        connection.commit()
    except ValueError:
        pass
def change_city(id, s):
    try:
        cursor.execute('SELECT * FROM visit')
        res = cursor.fetchall()
        cursor.execute('SELECT Name FROM places WHERE id = ?', (id, ))
        a = cursor.fetchone()
        k = a[0] #–∏–º—è —Å –¥–∞–Ω–Ω—ã–º id
        cursor.execute('SELECT City FROM places WHERE id = ?', (id, ))
        b = cursor.fetchone()
        m = b[0] #–∫–æ–¥ –≥–æ—Ä–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º id
        for r in res:
            t = r[0]
            if t[0: len(t) - 15] == k and t[len(t)-13:len(t)-1] == CityCode(m):
                d = t.replace(CityCode(m), CityCode(s))
                cursor.execute('UPDATE visit SET location = ? WHERE location = ?', (d, r[0]))
        cursor.execute('UPDATE places SET City = ? WHERE id = ?', (s, id))
        connection.commit()
    except ValueError:
        pass
def change_type(id, s):
    try:
        cursor.execute('UPDATE places SET type = ? WHERE id = ?', (s, id))
        connection.commit()
    except ValueError:
        pass
def print_places():
    cursor.execute('SELECT * FROM places')
    users = cursor.fetchall()
    for user in users:
        print(user)
#—Ç–∞–±–ª–∏—Ü–∞ rating
def print_rating():
    cursor.execute('SELECT * FROM rating')
    users = cursor.fetchall()
    for user in users:
        print(user)
def Insert_rating(i):
    cursor.execute('SELECT number FROM rating WHERE rtng = ?', (i, ))
    res = cursor.fetchone()
    cursor.execute('UPDATE rating SET number = ? WHERE rtng = ?', (int(res[0]) + 1, i))
    connection.commit()
def output():
    connection.close()

#**************************************************************************************************************************************
UserPrivate = Router()

IsAgree = False
PlacePar=[None,None]
photo_to_del=None

city_code={'klgd':'–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', 'zel':'–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫', 'sve':'–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫', 'yant':'–Ø–Ω—Ç–∞—Ä–Ω—ã–π', 'pol':'–ü–æ–ª–µ—Å—Å–∫', 'cher':'–ß–µ—Ä–Ω—è—Ö–æ–≤—Å–∫'}

# @UserPrivate.message(CommandStart())
# async def start_cmd(message: types.Message):
#     await message.answer('–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏!üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å —Å—É–º–º—É —Å–∫–∏–¥–∫–∏ –Ω–∞ –ª—é–±–æ–π –≤–∏–¥ '
#                          '—É—Å–ª—É–≥ –≤ –Ω–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏!–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è—é—Ç—Å—è –Ω–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã)')
#     await message.answer('–ü–æ–º–Ω–∏—Ç–µ:\n  *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –∞ —Å–∫–∏–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ä—Ç–µ –≥–æ—Å—Ç—è '
#                          '–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–≥–æ–¥–Ω–æ.\n  *–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –≥–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞. '
#                          '–ö–∞—Ä—Ç—É –≥–æ—Å—Ç—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞—Ä–∞–Ω–µ–µ –¥–æ –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤.\n'
#                          '(–Ω–∞–∂–º–∏—Ç–µ "–ø–æ—á–∏—Ç–∞–Ω–æ", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º)', reply_markup=get_agree_button())

@UserPrivate.callback_query(F.data == "agree")
async def agree_handle(callback: types.CallbackQuery):
    await callback.answer()
    IsAgree = True
    await callback.message.answer_photo(blank_photo, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫—É—é –æ–±–ª–∞—Å—Ç—åüëã', reply_markup=get_choice_mod())
    await callback.message.delete()

@UserPrivate.callback_query(F.data == "card_work")
async def cardwork_handle(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_caption(caption='–ö–∞—Ä—Ç–∞ –≥–æ—Å—Ç—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ ‚Äì –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, '
                                  '–±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π —Ç—É—Ä–∏—Å—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ª—É—á—à–∏–µ '
                                  '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞!\n–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö-—É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö '
                                  '–ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–∫–∏–¥–∫–æ–π –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ', reply_markup=get_back_button(1))

@UserPrivate.callback_query(or_f(F.data == "back_1", F.data == "back_2"))
async def back12_handle(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_caption(caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫—É—é –æ–±–ª–∞—Å—Ç—åüëã', reply_markup=get_choice_mod())

@UserPrivate.callback_query(F.data == "start_work")
async def startwork_handle(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_caption(caption='–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—åüìÇ:', reply_markup=get_cities_menu_keyboard())


@UserPrivate.callback_query(or_f(F.data == "klgd", F.data == "zel", F.data == "sve", F.data == 'yant',
                                 F.data == "pol", F.data == "cher", F.data == "all_cyt"))
async def citiesmenu_handle(callback: types.CallbackQuery):
    await callback.answer()
    PlacePar[0]=callback.data
    await callback.message.edit_caption(caption='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—åüìÇ:', reply_markup=get_type_menu_keyboard())

@UserPrivate.callback_query(or_f(F.data == "kult", F.data ==  "ent", F.data ==  "food", F.data ==  'liv', F.data ==  "driv",
                            F.data == "SPA", F.data == "suv", F.data == "tur", F.data == "all_typ"))
async def typemenu_handle(callback: types.CallbackQuery):
    await callback.answer()
    PlacePar[1]=callback.data
    await callback.message.edit_caption(caption='–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—é—é—â–∏–µ –º–µ—Å—Ç–æüìÇ:', reply_markup=get_placesmenu_by_parms(PlacePar))

@UserPrivate.callback_query(F.data == "back_3")
async def back3_handle(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_caption(caption='–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—åüìÇ:',
                                     reply_markup=get_cities_menu_keyboard())
@UserPrivate.callback_query(F.data == "back_4")
async def back4_handle(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_caption(caption='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—åüìÇ:', reply_markup=get_type_menu_keyboard())

@UserPrivate.callback_query(or_f(F.data == '0', F.data == '1', F.data== '2', F.data == '3', F.data== '4', F.data == '5',
                                 F.data== '6', F.data == '7', F.data== '8', F.data == '9', F.data== '10', F.data == '11',
                                 F.data== '12', F.data == '13', F.data == '14', F.data== '15', F.data == '16', F.data== '17',
                                 F.data == '18', F.data== '19', F.data == '20', F.data== '21', F.data == '22', F.data== '23',
                                 F.data == '24', F.data== '25', F.data== '26', F.data == '27', F.data== '28', F.data == '29',
                                 F.data== '30', F.data == '31', F.data== '32', F.data == '33', F.data == '34', F.data== '35',
                                 F.data == '36', F.data== '37', F.data == '38', F.data== '39', F.data == '40', F.data== '41',
                                 F.data == '42'))
async def place_info_handle(callback: types.CallbackQuery, bot : Bot):
    await callback.answer()
    place_now=Places[int(callback.data)]
    await callback.message.edit_media(media=types.InputMediaPhoto(media=Places[int(callback.data)][7]))
    await callback.message.edit_caption(caption=f"C–ö–ò–î–ö–ê {place_now[4]}%!!\n{place_now[0]} - —ç—Ç–æ {place_now[2]}.\n"
                                     f"–ù–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—Å—É: {place_now[1]}.\n"
                                     f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —ç—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: {place_now[3]}\n"
                                                f"–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ?", reply_markup=get_info_about_place(place_now))

@UserPrivate.callback_query(F.data == "back_5")
async def back5_handle(callback: types.CallbackQuery, bot : Bot):
    await callback.answer()
    await callback.message.edit_media(media=types.InputMediaPhoto(media=blank_photo))
    await callback.message.edit_caption(caption='–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—é—é—â–∏–µ –º–µ—Å—Ç–æ:', reply_markup=get_placesmenu_by_parms(PlacePar))
    await bot.delete_message(callback.message.chat.id, callback.message.message_id+1)

@UserPrivate.callback_query(F.data == 'rate_work', StateFilter(None))
async def change_sale(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_caption(caption='–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –≤—ã –Ω–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç–µ?', reply_markup=get_choice_rate())

@UserPrivate.callback_query(F.data.contains('rate_work_'), StateFilter(None))
async def change_sale(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_caption(caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å/—É–ª—É—á—à–∏—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.\n–ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!', reply_markup=get_back_button(6))
    await state.set_state(FormRate_bot.msg)
    await state.update_data(rate=int(callback.data[-1]))

@UserPrivate.callback_query(F.data == "back_6")
async def back6_handle(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_caption(caption='–°–∫–æ–ª—å–∫–æ –∑–≤—ë–∑–¥ –≤—ã –Ω–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç–µ?', reply_markup=get_choice_rate())
    await state.clear()

@UserPrivate.message(F.text, FormRate_bot.msg)
async def change_sale(message: types.Message, state: FSMContext):
    # try:
    data = await state.get_data()
    Insert_rating(data['rate'])
    await state.clear()
    await message.answer_photo(blank_photo, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!‚úÖ', reply_markup=get_back_button(2))
    # except:
    #     await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')